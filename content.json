[{"title":"JSP语法","date":"2016-12-20T02:00:13.306Z","path":"2016/12/20/JSP语法/","text":"脚本程序脚本程序可以包含任意量的Java语句、变量、方法或表达式，只要它们在脚本语言中是有效的。脚本程序的语法格式： 1&lt;% 代码片段 %&gt; 或者，您也可以编写与其等价的XML语句，就像下面这样： 123&lt;jsp:scriptlet&gt; 代码片段&lt;/jsp:scriptlet&gt; 任何文本、HTML标签、JSP元素必须写在脚本程序的外面。下面给出一个示例，同时也是本教程的第一个JSP示例： 123456789&lt;html&gt;&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Hello World!&lt;br/&gt;&lt;%out.println(\"Your IP address is \" + request.getRemoteAddr());%&gt;&lt;/body&gt;&lt;/html&gt; 中文编码问题如果我们要在页面正常显示中文，我们需要在 JSP 文件头部添加以下代码：&lt;&gt;12&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%&gt; JSP声明一个声明语句可以声明一个或多个变量、方法，供后面的Java代码使用。在JSP文件中，您必须先声明这些变量和方法然后才能使用它们。 JSP声明的语法格式：1&lt;%! declaration; [ declaration; ]+ ... %&gt; 或者，您也可以编写与其等价的XML语句，就像下面这样：123&lt;jsp:declaration&gt; 代码片段&lt;/jsp:declaration&gt; 程序示例：123&lt;%! int i = 0; %&gt;&lt;%! int a, b, c; %&gt;&lt;%! Circle a = new Circle(2.0); %&gt; JSP表达式一个JSP表达式中包含的脚本语言表达式，先被转化成String，然后插入到表达式出现的地方。由于表达式的值会被转化成String，所以您可以在一个文本行中使用表达式而不用去管它是否是HTML标签。表达式元素中可以包含任何符合Java语言规范的表达式，但是不能使用分号来结束表达式。JSP表达式的语法格式：1&lt;%= 表达式 %&gt; 同样，您也可以编写与之等价的XML语句：123&lt;jsp:expression&gt; 表达式&lt;/jsp:expression&gt; 程序示例：1234567891011121314&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=\"utf-8\"&gt;&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt; 今天的日期是: &lt;%= (new java.util.Date()).toLocaleString()%&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 运行后得到以下结果：1今天的日期是: 2016-6-25 13:40:07 JSP注释1&lt;%-- 该部分注释在网页中不会被显示--%&gt; 语法 描述&lt;%– 注释 –%&gt; JSP注释，注释内容不会被发送至浏览器甚至不会被编译 HTML注释，通过浏览器查看网页源代码时可以看见注释内容 &lt;\\% 代表静态 &lt;%常量 %> 代表静态 %&gt; 常量 \\’ 在属性中使用的单引号 \\” 在属性中使用的双引号 JSP指令JSP指令用来设置与整个JSP页面相关的属性。JSP指令语法格式：1&lt;%@ directive attribute=\"value\" %&gt; 这里有三种指令标签：指令 描述&lt;%@ page … %&gt; 定义页面的依赖属性，比如脚本语言、error页面、缓存需求等等&lt;%@ include … %&gt; 包含其他文件&lt;%@ taglib … %&gt; 引入标签库的定义，可以是自定义标签 JSP行为JSP行为标签使用XML语法结构来控制servlet引擎。它能够动态插入一个文件，重用JavaBean组件，引导用户去另一个页面，为Java插件产生相关的HTML等等。行为标签只有一种语法格式，它严格遵守XML标准：1&lt;jsp:action_name attribute=\"value\" /&gt; 行为标签基本上是一些预先就定义好的函数，下表罗列出了一些可用的JSP行为标签： 语法 描述jsp:include 用于在当前页面中包含静态或动态资源jsp:useBean 寻找和初始化一个JavaBean组件jsp:setProperty 设置 JavaBean组件的值jsp:getProperty 将 JavaBean组件的值插入到 output中jsp:forward 从一个JSP文件向另一个文件传递一个包含用户请求的request对象jsp:plugin 用于在生成的HTML页面中包含Applet和JavaBean对象jsp:element 动态创建一个XML元素jsp:attribute 定义动态创建的XML元素的属性jsp:body 定义动态创建的XML元素的主体jsp:text 用于封装模板数据 JSP隐含对象JSP支持九个自动定义的变量，江湖人称隐含对象。这九个隐含对象的简介见下表： 对象 描述request HttpServletRequest类的实例response HttpServletResponse类的实例out PrintWriter类的实例，用于把结果输出至网页上session HttpSession类的实例application ServletContext类的实例，与应用上下文有关config ServletConfig类的实例pageContext PageContext类的实例，提供对JSP页面所有对象以及命名空间的访问page 类似于Java类中的this关键字Exception Exception类的对象，代表发生错误的JSP页面中对应的异常对象 控制流语句JSP提供对Java语言的全面支持。您可以在JSP程序中使用Java API甚至建立Java代码块，包括判断语句和循环语句等等。 判断语句If…else块，请看下面这个例子：123456789101112131415161718&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%&gt;&lt;%! int day = 3; %&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=\"utf-8\"&gt;&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h3&gt;IF...ELSE 实例&lt;/h3&gt;&lt;% if (day == 1 | day == 7) &#123; %&gt; &lt;p&gt;今天是周末&lt;/p&gt;&lt;% &#125; else &#123; %&gt; &lt;p&gt;今天不是周末&lt;/p&gt;&lt;% &#125; %&gt;&lt;/body&gt;&lt;/html&gt; 运行后得到以下结果：12IF...ELSE 实例今天不是周末 现在来看看switch…case块，与if…else块有很大的不同，它使用out.println()，并且整个都装在脚本程序的标签中，就像下面这样： 12345678910111213141516171819202122232425262728293031323334353637&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%&gt;&lt;%! int day = 3; %&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=\"utf-8\"&gt;&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h3&gt;SWITCH...CASE 实例&lt;/h3&gt;&lt;%switch(day) &#123;case 0: out.println(\"星期天\"); break;case 1: out.println(\"星期一\"); break;case 2: out.println(\"星期二\"); break;case 3: out.println(\"星期三\"); break;case 4: out.println(\"星期四\"); break;case 5: out.println(\"星期五\"); break;default: out.println(\"星期六\");&#125;%&gt;&lt;/body&gt;&lt;/html&gt; 浏览器访问，运行后得出以下结果：123SWITCH...CASE 实例星期三 循环语句在JSP程序中可以使用Java的三个基本循环类型：for，while，和 do…while。让我们来看看for循环的例子，以下输出的不同字体大小的”菜鸟教程”：123456789101112131415161718&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%&gt;&lt;%! int fontSize; %&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=\"utf-8\"&gt;&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h3&gt;For 循环实例&lt;/h3&gt;&lt;%for ( fontSize = 1; fontSize &lt;= 3; fontSize++)&#123; %&gt; &lt;font color=\"green\" size=\"&lt;%= fontSize %&gt;\"&gt; 菜鸟教程 &lt;/font&gt;&lt;br /&gt;&lt;%&#125;%&gt;&lt;/body&gt;&lt;/html&gt;","tags":[]},{"title":"spring_boot  简单配置","date":"2016-12-15T11:39:19.069Z","path":"2016/12/15/spring_boot-简单的配置/","text":"Web应用构建起步springboot 的优势我就在在理不多赘述了，我主要把配成告诉大家。如何快速配出一个简单的Web项目。 首先使用IDEA新建一个简单的Maven的项目，然后在src包下建立一个自己项目名的文件夹 然后就是最重要POM.xml 的配置，具体意义我就不多说了。配好以后可以自己去查查。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;spring_boot_simple&lt;/groupId&gt; &lt;artifactId&gt;zhangfan&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;!-- 设定主仓库，按设定顺序进行查找。 --&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;1&lt;/id&gt; &lt;name&gt;gxb&lt;/name&gt; &lt;url&gt;http://172.16.1.14:8081/nexus/content/groups/public/&lt;/url&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.4.0.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;/parent&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-redis&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;version&gt;1.0.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.2.16&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.11&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt; &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt; &lt;configuration&gt; &lt;path&gt;/&lt;/path&gt; &lt;port&gt;8080&lt;/port&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;source&gt;1.7&lt;/source&gt; &lt;target&gt;1.7&lt;/target&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 配好基本的配置，就可以在主目录下建立一个Application的类，BOOT会扫描这个类，但是记得一点要记得写注解 1234567891011121314151617181920212223242526package com.zhangfan;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;/** * Created by zhangfanfan on 16-9-6. */@SpringBootApplication@RestControllerpublic class Application &#123; final Logger logger= LoggerFactory.getLogger(Application.class); @RequestMapping(\"/\") public String greeting() &#123; return \"Hello World!\"; &#125; public static void main(String[] args) &#123; SpringApplication.run(Application.class, args); &#125;&#125; 这样我们就已经配好了最简单的应用了，这时候我已经可以启动项目。进行访问本地连接了 http://localhost:8080/ 了。 当然我们主要的是要看H5的页面内容。其实很简单。BOOT会自动扫描resources下面的static的文件夹内的html格式的H5。所以我们只需要 重启项目后访问： http://localhost:8080/ 后面加你H5的文件名.html 。就可以看到页面内容了。 对XML的保留springboot 依然保留对XML的解析，就是说我们依然可以使用我们习惯的XML进行使用。当然springboot是有方法取代繁琐的XML配置的。这也是它能火的重要原因吧","tags":[]},{"title":"JQuery基础——选择器","date":"2016-12-15T06:28:36.834Z","path":"2016/12/15/jquery-选择器/","text":"12通过 jQuery，可以选取（查询，query） HTML 元素，并对它们执行“操作”（actions） $(document).ready(function()&#123;&#125;)可以简写成$(funtion()&#123;&#125;) jQuery 元素选择器1jQuery 使用 CSS 选择器来选取 HTML 元素。 $(“p”) 选取 元素。 $(“p.intro”) 选取所有 class=”intro” 的 元素。 $(“p#demo”) 选取所有 id=”demo” 的 元素。 jQuery 属性选择器1jQuery 使用 XPath 表达式来选择带有给定属性的元素。 $(“[href]”) 选取所有带有 href 属性的元素。 $(“[href=’#’]”) 选取所有带有 href 值等于 “#” 的元素。 $(“[href!=’#’]”) 选取所有带有 href 值不等于 “#” 的元素。 $(“[href$=’.jpg’]”) 选取所有 href 值以 “.jpg” 结尾的元素。 jQuery CSS 选择器12jQuery CSS 选择器可用于改变 HTML 元素的 CSS 属性。下面的例子把所有 p 元素的背景颜色更改为红色： 1$(\"p\").css(\"background-color\",\"red\"); $(this) 当前 HTML 元素 $(“p”) 所有 元素 $(“p.intro”) 所有 class=”intro” 的 元素 $(“.intro”) 所有 class=”intro” 的元素 $(“#intro”) id=”intro” 的元素 $(“ul li:first”) 每个 的第一个 元素 $(“[href$=’.jpg’]”) 所有带有以 “.jpg” 结尾的属性值的 href 属性 $(“div#intro .head”) id=”intro” 的 元素中的所有 class=”head” 的元素 12345$(document).ready(function()&#123;--- jquery 的方法写在这个区域中 ----这是为了防止文档在完全加载就绪之前运行jquery代码。&#125;);","tags":[]},{"title":"张凡","date":"2016-12-08T05:27:16.026Z","path":"2016/12/08/zhangfan/","text":"MaHua是什么?一个在线编辑markdown文档的编辑器 向Mac下优秀的markdown编辑器mou致敬 MaHua有哪些功能？ 方便的导入导出功能 直接把一个markdown的文本文件拖放到当前这个页面就可以了 导出为一个html格式的文件，样式一点也不会丢失 编辑和预览同步滚动，所见即所得（右上角设置） VIM快捷键支持，方便vim党们快速的操作 （右上角设置） 强大的自定义CSS功能，方便定制自己的展示 有数量也有质量的主题,编辑器和预览区域 完美兼容Github的markdown语法 预览区域代码高亮 所有选项自动记忆 有问题反馈在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流 邮件(dev.hubo#gmail.com, 把#换成@) QQ: 287759234 weibo: @草依山 twitter: @ihubo 捐助开发者在兴趣的驱动下,写一个免费的东西，有欣喜，也还有汗水，希望你喜欢我的作品，同时也能支持一下。当然，有钱捧个钱场（右上角的爱心标志，支持支付宝和PayPal捐助），没钱捧个人场，谢谢各位。 感激感谢以下的项目,排名不分先后 mou ace jquery 关于作者1234var ihubo = &#123; nickName : \"草依山\", site : \"http://jser.me\"&#125; 1String sd = \" sds\"","tags":[]},{"title":"Hello World","date":"2016-12-08T03:00:36.931Z","path":"2016/12/08/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]